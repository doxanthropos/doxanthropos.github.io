<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fragmented Notes]]></title>
  <link href="http://doxanthropos.github.io/atom.xml" rel="self"/>
  <link href="http://doxanthropos.github.io/"/>
  <updated>2017-01-08T23:31:13+01:00</updated>
  <id>http://doxanthropos.github.io/</id>
  <author>
    <name><![CDATA[Knut Jackowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[100 Days of Code]]></title>
    <link href="http://doxanthropos.github.io/blog/2017/01/04/100-days-of-code/"/>
    <updated>2017-01-04T00:55:17+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2017/01/04/100-days-of-code</id>
    <content type="html"><![CDATA[<p>Being occupied with a lot of other stuff that happened in my life and with other topics to learn, I somehow lost sight of making progress with the curriculum of <a href="http://freecodecamp.com/">FreeCodeCamp</a>. But when I encountered the <a href="https://medium.freecodecamp.com/start-2017-with-the-100daysofcode-improved-and-updated-18ce604b237b">medium-post about the 100 Days of Code challenge</a>, I realized, that it is time to go and get my Front-End-Certificate.</p>

<!-- more -->


<p></p>

<p>As the challenge expects, I have forked <a href="https://github.com/Kallaway/100-days-of-code">the repo</a> to track my progress in <a href="https://github.com/doxanthropos/100-days-of-code/blob/master/log.md">a log</a> and I have migrated the existing projects to github for easier version control. All my work on Free Code Camp Projects will now live in a <a href="https://github.com/doxanthropos/fccportfolio">seperate repo</a>. Its contents are also available as websites via Github-Pages (<a href="https://doxanthropos.github.io/fccportfolio/build-a-personal-portfolio-webpage/">Example: The Portfolio Page</a>). I am very curious to see where this will lead me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Into Web-audio - Generating Sound]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/11/06/looking-into-web-audio-an-overview/"/>
    <updated>2016-11-06T12:47:03+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/11/06/looking-into-web-audio-an-overview</id>
    <content type="html"><![CDATA[<p>It looks as if it is possible to create sound just with the capabilities of the browser, using JavaScript to access the <a href="https://www.w3.org/TR/webaudio/">Web Audio API</a>. I take a first look into it.</p>

<!-- more -->


<h2>Yes, there is web-audio. What&rsquo;s the point?</h2>

<p>The reason I am writing this blog post is that I want to understand the subject myself, motivated by a course on <a href="https://www.kadenze.com/courses/creative-programming-for-audiovisual-art-i">Creative Programming for Audiovisual Art</a>, tought by Mick Grierson at Goldsmiths University of London. I ran into some technical problems right in the first session, starting with the web platform, that is used for coding in the course eating all my RAM and so basically freezing itself and my entire computer. So I looked into the library that is used in this course (<a href="https://github.com/micknoise/Maxim">Maxim</a>, a c++ library ported to JavaScript, written by Mick Grierson) and tried the examples, provided with the library and got not sound, but error messages. Since I am in no hurry to get through the course (I am only accessing it with the free plan, where I don&rsquo;t get graded anyway), I decided to dig a little deeper into it to understand the issues I am having and to find a way to generate sound that will not freeze my computer or make my browsers complain and work well with the course.</p>

<p>So in this post, I will take a basic look into what the web-audio API is, which libraries look promising to me and maybe even find out what I did wrong with Maxim in the process. At the end I would like to have a couple of working simple examples to show, with different technologies.</p>

<p>Dan Mackinlay wrote about this topic in a <a href="https://livingthing.danmackinlay.name/javascript_audio.html">blog post</a>, that was one of my first finds when looking for clues to web-audio.</p>

<h2>Can I use it?</h2>

<p>As with all modern web technologies one of the first questions might be: Does it even work in my browser? Can I use it for projects that are meant to be seen by the public or will they encounter problems with their browsers or devices?</p>

<p>The short answer is &ldquo;Yes&rdquo;.</p>

<p>The long answer:
In november 2016 it is supported by all major browsers on the desktop, on iOS and on Chrome for Android. The only browsers that do not support web-audio are Opera-Mini and Internet Explorer (<a href="http://caniuse.com/#feat=audio-api">source</a>), but who cares about IE anymore.</p>

<p> There are some parts of it that are differing between the browsers.</p>

<p>&ldquo;getUserMedia/Stream API&rdquo; seems to be a part of the web-audio API that is still at least a little problematic, because it is handled differently by the browsers that implement it:
Chrome and Firefox require prefixes: Firefox uses &ldquo;moz&rdquo; and Chrome and Opera use &ldquo;webkit&rdquo; and Chrome can only be called from secure origins.</p>

<h2>How to use it?</h2>

<p>Basically there are two main options: using it directly, with vanilla JavaScript, or using it with the help of a library. The existance of multiple libraries might indicate, that there is a need for one.</p>

<h2>Without library</h2>

<p>This primary documentation is as always of course the <a href="https://www.w3.org/TR/webaudio/">specification by the w3c</a>, but it is (because it is a specification and not a tutorial or introduction) not the best read.</p>

<p>Surprisingly (considering that IE does not support web-audio) Microsoft has a good (short) <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/dev-guide/multimedia/web-Audio/">introduction into the API</a>. It is not really helpful for understanding to create sound, because it focuses on working with audio inputs like sound files or microphone streams, the relevant info for generating sound is in the article about the <a href="https://msdn.microsoft.com/library/dn954887%28v=vs.85%29.aspx">OscillatorNode</a>. This is the same with the Mozilla Developer Network on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio</a> and the <a href="https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode">OscillatorNode</a>. While here I am only looking into creating sound, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode">AnalyserNode</a> needs mentioning for later projects, that might include audio visualization. There is a nice example of the OscillatorNode combined with some graphics on MDN called <a href="http://mdn.github.io/violent-theremin/">Violent Theremin</a>.</p>

<p>With this I was able to produce a simple page that plays a sine wave and adjusts the volume with two buttons:</p>

<p><a href="https://doxanthropos.github.io/sketchbook/web-audio/01/">Example 1</a></p>

<p>As you can see in the code or in the mentioned documentation, the AudioContext works with different nodes, that are connected to another, beginning with one or more sources, going through some nodes that do stuff with the signal and then joined into a Destination. A very nice tutorial that goes deep enough to do real stuff is <a href="https://www.html5rocks.com/en/tutorials/webaudio/intro/#toc-volume">Getting Started with Web Audio API</a> by HTML5 Rocks.</p>

<h2>Libraries</h2>

<p>For a list of existing libraries you can go to <a href="https://livingthing.danmackinlay.name/javascript_audio.html">Dan Mackinleays blog post</a>, that I mentioned in the first paragraph. I will look into two that are of interest to me.</p>

<h3><a href="https://p5js.org/reference/#/libraries/p5.sound">p5.sound</a></h3>

<p>As the name suggests, this is an addition to <a href="http://p5js.org/">p5.js</a>, a JavaScript library that is a reimagination of the <a href="http://processing.org/">Processing language</a> for creative programming.</p>

<p>The sound library is provided at the website of the p5.js-project and it is also included in the p5-editor. That makes using the library very easy if you are already using p5 for creative programming.</p>

<p>To generate sounds there is also an oscillator object, but the p5.Oscillator combines with it some functions that are part of other nodes in the Web Audio API, for example the <a href="https://p5js.org/reference/#/p5.Oscillator/amp">amp()-method</a> for controlling the amplitude, that not only changes the value of the amplitude, but also takes an optional value for smoothing the transition.</p>

<p><a href="httop://p5js.org/">p5.js</a> has another advantage and that is <a href="http://shiffman.net/">Daniel Shiffman</a>, a professor at NYU, who makes great videos about p5 and processing, that are to be found on <a href="https://www.youtube.com/user/shiffman">his youtube-channel</a>, like this <a href="https://www.youtube.com/watch?v=bM9MfoKe9GU">long one about sound visualization</a>.</p>

<p><a href="https://doxanthropos.github.io/sketchbook/web-audio/02/">Example 2</a></p>

<h3><a href="https://github.com/micknoise/Maxim">Maxim</a></h3>

<p>I have not looked into this one yet, which is of course a little stupid, because it is the one used in the course that prompted this excursion.</p>

<h2>Conclusion for today</h2>

<p>It is not that difficult to start generating sounds without any library. The Web Audio API has good documentation and is not very obscure.</p>

<ul>
<li><a href="https://doxanthropos.github.io/sketchbook/web-audio/01/">Example 1</a></li>
<li><a href="https://doxanthropos.github.io/sketchbook/web-audio/02/">Example 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging About P5JS]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/05/15/blogging-about-p5js/"/>
    <updated>2016-05-15T15:47:56+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/05/15/blogging-about-p5js</id>
    <content type="html"><![CDATA[<p>This is kind of a new version of my old <a href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/">post about Processing</a> and will cover the things I learned while writing my <a href="http://doxanthropos.github.io/blog/2016/05/15/a-minimalist-physics-engine/">last post</a> to make a <a href="https://p5js.org/">P5JS</a>-sketch work on this blog.</p>

<!-- more -->


<p><a href="https://p5js.org/">P5</a> is somewhat different from the common <a href="https://processing.org/">Processing</a>, because it is a complete rewrite of the language into Javascript. This makes it easier to use on the web and also more flexible to include into a webpage in places where traditional Processing even with Processing.js would not work.</p>

<p>Consider this code that I used to run the sketch in my last post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/p5.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/p5.dom.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">center</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;setup();&quot;</span><span class="o">&gt;</span><span class="nx">Restart</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/center&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;p5canvas&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cnv</span> <span class="o">=</span> <span class="nx">createCanvas</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#p5canvas&quot;</span><span class="p">).</span><span class="nx">width</span><span class="p">(),</span><span class="mi">360</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">cnv</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="s2">&quot;p5canvas&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Walker</span><span class="p">(</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">background</span><span class="p">(</span><span class="mi">51</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">display</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Walker</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">pos</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vel</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">acc</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.1</span><span class="p">);</span>   
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">vel</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">acc</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vel</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">fill</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ellipse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">48</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two lines are kind of obvious. They load the necessary p5-libraries into the page.</p>

<p>Line 4 is useful for many sketches that include movement, to start it again at the beginning. The button calls the function &ldquo;setup&rdquo; to restart the whole sketch.</p>

<p>The really cool part is line 6 with lines 10 and 11: they create the canvas for the processing sketch in a normal div that is adressed by its id (#p5canvas). This is done with the <a href="http://p5js.org/reference/#/libraries/p5.dom">p5.dom</a> library that is really good documented (this is where I learned how to do this).</p>

<p>I used jQuery to pass the width of the div to the setup function, so that it would fit into the blog regardless of the size of the window.</p>

<p>One cool consequence of this is that P5 can be inserted into any html element on your website that you can identify via JavaScript/jQuery.</p>

<p>I really like this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Minimalist Physics Engine]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/05/15/a-minimalist-physics-engine/"/>
    <updated>2016-05-15T13:04:03+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/05/15/a-minimalist-physics-engine</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/shiffman">Daniel Shiffman</a> surprised me yesterday in his course &ldquo;<a href="https://www.kadenze.com/courses/the-nature-of-code">The Nature of Code</a>&rdquo; with a most simple concept of a physics engine in two lines of JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">pos</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">vel</span><span class="p">);</span>
</span><span class='line'><span class="nx">vel</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">acc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<script src="http://doxanthropos.github.io/javascripts/p5.js"></script>


<script src="http://doxanthropos.github.io/javascripts/p5.dom.js"></script>


<p>These two lines have the three components(vectors) that are necessary to describe movement: position, velocity and acceleration:</p>

<ol>
<li>Objects have a position (pos).</li>
<li>The position gets changed (add) by velocity (vel).</li>
<li>The velocity gets changed (add) by acceleration (acc).</li>
</ol>


<p>The add-method comes from <a href="https://p5js.org">P5JS</a> and belongs to the <a href="linktothevectorobjectsdocumentation">vector object</a>.</p>

<p>Of course to use it in a sketch, there is more to write than these two lines, but they contain the core concept. For example, this code from the course creates a circle that looks like it is falling, because it accelerates downward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">function</span> <span class="nx">Walker</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">pos</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vel</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">acc</span> <span class="o">=</span> <span class="nx">createVector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.1</span><span class="p">);</span>   
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">vel</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">acc</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vel</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">fill</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ellipse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">pos</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">48</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<center>
<button onclick="setup();" style="align:right;">Restart</button>
</center>


<div id="p5canvas"></div>


<script>
var w;
function setup() {
    var cnv = createCanvas($("#p5canvas").width(),360);
    w = new Walker(width/2,0);
    cnv.parent("p5canvas");
}

function draw() {
    background(51);
    w.display();
    w.update();
  
}

function Walker(x,y) {
    this.pos = createVector(x,y);
    this.vel = createVector(0,0);
    this.acc = createVector(0,0.1); 

    this.update = function(){
        this.vel.add(this.acc);
        this.pos.add(this.vel);
    }

    this.display = function(){
        fill(255);
        ellipse(this.pos.x,this.pos.y,48,48);
    }
}

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Advanced Styling With Responsive Design]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/04/10/review-advanced-styling-with-responsive-design/"/>
    <updated>2016-04-10T11:38:03+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/04/10/review-advanced-styling-with-responsive-design</id>
    <content type="html"><![CDATA[<p>Yesterday I finished the course &ldquo;<a href="https://www.coursera.org/learn/responsivedesign">Advanced Styling with Responsive Design</a>&rdquo; on Coursera. It is the fourth course of the &ldquo;<a href="https://www.coursera.org/specializations/web-design">Web Design for Everybody</a>&rdquo; specialization from the University of Michigan and it is taught by Colleen van Lent like the other three courses. Despite the fact, that the technical knowledge this course provides was not all new to me, I think I still have learned a lot.</p>

<!-- more -->


<p>When I discovered the courses of the specialization, I had a look at the first two and skipped them, because they seemed to be on a more introductory level, than what I thought, that I would need. The first one that I actually took and also finished was the &ldquo;<a href="https://www.coursera.org/learn/javascript">Interactivity with JavaScript</a>&rdquo; course, the third one in the series and after that the responsive design course.</p>

<p>The content of both courses was mostly not new to me and I don&rsquo;t think, that I have seen JavaScript or CSS in one of them, that I had not seen or even written before.</p>

<p>What made these courses still worthwhile were the lectures by Colleen, because she tried very successfully, not only to talk about the technical details, but to provide always the bigger picture. For example, I knew how to use Bootstrap grids and I had heard about &ldquo;mobile first&rdquo;, but it took this course for me to really understand the connection between the two.</p>

<p>With this connection between the big picture and the details I have gained a lot of new understanding of how to think about web development.</p>

<p>The <a href="https://www.umich.edu/">University of Michigan</a> seems to have good luck in hiring their teachers. I have been kind of a fan of <a href="http://www.dr-chuck.com/">Doctor Chuck</a> for some time now (we use <a href="https://www.imsglobal.org/activity/learning-tools-interoperability">LTI</a> quite often at work and he has done a lot to popularize that standard), who teaches the &ldquo;<a href="https://www.coursera.org/specializations/python">Python for Everybody</a>&rdquo; specialization (I will probably talk about that in another post), but he is clearly not the only great teacher at this University.</p>

<p>I would recommend this course (and the whole specialization) to anybody who wants to learn web design or web development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrofuturism of the Web]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/03/25/retrofuturism-of-the-web/"/>
    <updated>2016-03-25T08:50:00+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/03/25/retrofuturism-of-the-web</id>
    <content type="html"><![CDATA[<p>A few days ago I was inveted to take part in a project, that is going to be a platform for online art. Although I am not a digital artist, at most I want to become one in the course of my studies, I was glad about the invitation and quickly took a look at the <a href="http://mkblv.space/">website of this project</a>. The design was quite unique, featuring elements of a Windows 95 desktop between the presented art and fonts that remind the visitor of the computers of the 80ies or 90ies. At the first visit, I just simply liked the look, probably mostly out of nostalgia and the remembrance of seemingly simpler times, but at the second visit (which was on e newer version, but with similar elements), I started to think more about the choice of design.</p>

<!-- more -->


<p>Going back into the past can serve different purposes. The most common would probably be the one, I had when I first visited the website: nostalgia and remembrance. But there are others.</p>

<p>Especially in the firmly established field of fiction called retrofuturism, of which genres like steampunk and also less obvious cyberpunk are variations, the main point is not nostalgia, but the exploration of different possibilities. Like the philosopher Hans Blumenberg described in his book <a href="http://www.amazon.de/Lesbarkeit-Welt-suhrkamp-taschenbuch-wissenschaft/dp/3518281925">&ldquo;Die Lesbarkeit der Welt&rdquo;</a> (The Readability of the World): &ldquo;What was the world, that one believed to be possible?&rdquo; (roughly translated by me). And for more activist purposes this point can also go further into the direction of reclaiming futures that seem to be lost to the profanity of that what really happend after the point at which one percieves these possibilities of a different future.</p>

<p>For a genre like steampunk this would be the possibility of a world, where the process of inovation and invention did not fully fall into the hands of the industry and capitalist mass production, but at least to a significant degree was still in the hands of geniuses, who are not only proficient in their engineering, but also in art and gentleman/womanship and who are not restricted in their visions, by the limitations of the market and the viability of their products for the many. Similar perspectives do relate to the genre of cyberpunk, that was established in the 80ies as a science fiction genre, but now has joined the other genres of retrofuturism, because its futures are now past us, without having been real.</p>

<p>So why do I like the design of a website, that in 2016 uses elements of the 80ies and 90ies for an art community? Because that was a time, when the new and exiting possibilites of the computer (mostly with the rise of home computers and for example the demo scene) and the web were first discovered and bright futures of communication, collaboration and art were envisioned. The time of the first blogs, that did not have this name yet and of countless personal homepages, that were handcrafted by people just learning the art of creating for the web, without existing conventions. The web was not a place of the big players of today. No Amazon or Google, no Facebook or even Wikipedia, just a network of people exploring the possibilities of this new and undiscovered medium. This feeling of open possibilities, of an open and undiscovered world, is in many ways lost today, but it is really fitting for a community of digital artists.</p>

<p>It is a good starting point for opening up again the horizon of creativity and possibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Adventures in Web Animations]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/03/08/adventures-in-web-animation/"/>
    <updated>2016-03-08T13:06:39+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/03/08/adventures-in-web-animation</id>
    <content type="html"><![CDATA[<p>Last weekend I played through the course &ldquo;<a href="https://www.codeschool.com/courses/adventures-in-web-animations">Adventures in Web Animations</a>&rdquo; on Codeschool.com. This was my first Codeschool.com course and I mostly took it, because it was the free weekend, I had nothing else to do, being sick and at home, and because web animation was a topic, that I knew not very well.</p>

<p>The lessons have been rather simple, with easy multiple choice questions and very guided coding excercises, but the instructor managed to explain the different parts of animation in great detail. While one cannot expect to learn this topic to the bone in one very short course, I have the impression that I now have a good overview how to animate with css and where to look for helpful resources on the way.</p>

<p>What I really liked was that this course has an accompanying screencast called &ldquo;<a href="https://www.codeschool.com/screencasts/soup-to-bits-adventures-in-web-animations">Soup to Bits: Adventures in Web Animations</a>&rdquo;. Usually I am not that much of a fan of screencasts for learning, but this one hit the right spot: I shows the instructor of the course Alyssa Nicoll together with another Codeschool.com developer Dan Denney working on an example website that is somewhat complete, but as they conclude, missing animations. So you can follow them for around an hour, how they put together the animations an this website, how they make mistakes and debug them, how they come to decide on the specifics of the animations and so on, until the website is ready. And if you really want to try your new skills, you can do the same, because the website they work on is available as a github repository.</p>

<p>These two parts, the course and the screencast, really work well together. The course sets the ground on which it is possible to go through the screencast without explaining everything and the screencast gives some meat the the bones of still dry and untested knowledge from the course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creative Coding With Processing ... Again]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again/"/>
    <updated>2015-08-09T14:53:56+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again</id>
    <content type="html"><![CDATA[<p>This week was the start of two courses (<a href="https://www.futurelearn.com/courses/creative-coding">Creative Coding on Futurelearn</a> and <a href="https://www.coursera.org/course/digitalmedia">Creative Programming for Digital Media &amp; Mobile Apps on Coursera.org</a> about creative programming in <a href="https://processing.org/">Processing</a>) and I blogged about them in my <a href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/">main blog</a>.
Since I have already done some of the assignments some time ago, I focused on some things that I knew about, but did not do so far.</p>

<h2>Creating gifs</h2>

<p>There are basically two simple ways to create gifs from Processing sketches (that&rsquo;s what the single programs are called in the Processing world) and both are explained by <a href="http://www.jeromeherr.space/">Jerome Herr</a> on <a href="http://p5art.tumblr.com/">his Tumblr</a>:</p>

<ol>
<li><a href="http://p5art.tumblr.com/post/98291300538/turning-a-processing-sketch-into-an-animated-gif">Save single frame images and combine them later with other tools</a> or</li>
<li><a href="http://p5art.tumblr.com/post/76979034572/exporting-sketches-as-animated-gifs-in-processing">use a library that creates the gif while the program is running</a>.</li>
</ol>


<p>I tried both and both worked fine, at least in part. I was able to install <a href="http://www.lcdf.org/gifsicle/">gifsicle</a>, but it would not run properly so I did what anyone would do who already has some experience with <a href="http://www.imagemagick.org/index.php">ImageMagick</a>, I used the usual <a href="https://www.tjhsst.edu/~dhyatt/supercomp/n401a.html">convert</a> to do the trick.</p>

<p>I will need some more tries to determine, which method to use more because they seem to have different effects on the speed of execution of the sketches. This doesn&rsquo;t really matter, when the animations are generated by code alone, because the framerate will be the same for the exection as for the gif, but it produces much different output when human interaction is part of the sketch.</p>

<p>So probably there will be more here about <a href="https://processing.org/">Processing</a> in the near future. By the way, the mentioned Tumblr from Jerome also has a <a href="http://p5art.tumblr.com/tutorials">nice list of learning ressources for Processing</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing With Diaspora]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/02/26/sharing-with-diaspora/"/>
    <updated>2015-02-26T21:28:11+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/02/26/sharing-with-diaspora</id>
    <content type="html"><![CDATA[<p>In the last weeks, I had some reasons to think about privacy issues and social networks. I stopped using Facebook and began using <a href="https://diasporafoundation.org/">Diaspora*</a> and <a href="https://www.gnu.org/software/social/">GNU/Social</a> more than before. So when I found a <a href="https://sharetodiaspora.github.io/about/">sharing service</a> earlier today, to share webpages into the Diaspora * <a href="http://the-federation.info/">Federation</a>, I used it as an excuse to get rid of the Twitter button and the Disqus comments and put in the Code to share to Diaspora * .</p>

<p>If you want to do the same, you will find the part of Octopress, that covers the sharing codes in &ldquo;source/_includes/post/sharing.html&rdquo;. Just put in the code from the sharing site and you are good to go:</p>

<figure class='code'><figcaption><span>Diaspora sharing link, without JavaScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://sharetodiaspora.github.io/?title=Your title here&amp;url=http://www.example.com/some/path&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://sharetodiaspora.github.io/favicon.png&quot;</span> <span class="na">style=</span><span class="s">&quot;border: 0px solid;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I only changed it a little, of course filling in the template code for the post-title and post-url:</p>

<figure class='code'><figcaption><span>Diaspora sharing link with Octopress Tags (diaspora.html)</span> <a href='http://doxanthropos.github.io/downloads/code/diaspora.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://sharetodiaspora.github.io/?title={{ page.title }}&amp;url={{ site.url }}{{ page.url }}&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size: 0.85;&quot;</span><span class="nt">&gt;</span>Share on Diaspora<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://sharetodiaspora.github.io/favicon.png&quot;</span> <span class="na">style=</span><span class="s">&quot;border: 0px solid;&quot;</span> <span class="nt">/&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python: Free Resources]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/01/11/learning-python/"/>
    <updated>2015-01-11T14:51:15+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/01/11/learning-python</id>
    <content type="html"><![CDATA[<p>This is a list of free online books and other resources for anybody interested in learning the Python programming language. There are other lists out there, this one contains only items, that I have personally tried and found useful.</p>

<ul>
<li><a href="http://www.codecademy.com/">Codecademy</a>: A website with interactive tutorials.</li>
<li><a href="http://www.pythonlearn.com/">PythonLearn</a>: A website and a book with videos and autograded exercises. It is the material used for the Coursera-course <a href="https://www.coursera.org/course/pythonlearn">Programming for Everybody</a> by Charles Severance.</li>
<li><a href="https://www.udacity.com/course/cs101">Udacity: Intro to Computer Science &amp; Programming CS 101</a>: A complete introduction to Computer Science with Python.</li>
<li><a href="http://www.greenteapress.com/thinkpython/">Think Python: How to Think Like a Computer Scientist</a>: A book that is also an introduction to Computer Science as well as an introduction to Python. If you have succeded in learning Python (at least to a reasonable degree), the author might still be of interest to you, there are some more advanced books on his website.</li>
<li><a href="http://learnpythonthehardway.org/book/">Learn Python The Hard Way</a>: A very good book about Python and Programming in general. Not really hard.</li>
<li>Last but not least: <a href="https://docs.python.org/2/tutorial/index.html">The Python Tutorial</a> - The official tutorial by Python.org.</li>
</ul>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up the Tools for CS 50]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/01/05/setting-up-the-tools-for-cs-50/"/>
    <updated>2015-01-05T13:45:11+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/01/05/setting-up-the-tools-for-cs-50</id>
    <content type="html"><![CDATA[<p>So CS 50 has officially begun. Time to get my computer ready for the work.</p>

<p>The installation and use of the appliance is covered in great detail on the coursepages, so there is no need to describe it here. What I do different is that I plan to work mostly outside of the appliance, because my computer is barely able to run it and it is a pain in the backside to use it for longer periods (It&rsquo;s an old laptop, that wasn&rsquo;t powerful even when it was new.).</p>

<!-- more -->


<p>Since I am using Linux on my computer as the main operating system, setting it up for coding is not so big a task. Most of the packages are allready installed by me (the most important would be &ldquo;build-essential&rdquo;, a metapackage, that brings compilers and stuff). Getting the functions from CS 50 to work is another thing.</p>

<p>First I followed the instructions on the <a href="https://manual.cs50.net/library/">manual</a> for the CS 50 libraries. It was a lot of copy/pasting, but in the end the libraries in all four languages worked fine.</p>

<p>After that, I began to search for instructions for the other tools of the appliance, most important the check50 script. A nice <a href="https://medium.com/@ddiipp/take-harvards-cs50-without-cs50-appliance-8372acb91314">blogpost on medium</a> showed me where to look, but sadly the mentioned git-repository was deleted since then. I found a <a href="https://github.com/jthurner/check50">copy of it on github</a> and tried to install it. Worked fine. But the most interesting part of it was the question: will it work with the current course?</p>

<p>For convenience I quickly made alias for it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">check50</span><span class="o">=</span><span class="s2">&quot;node /&quot;</span>path to my cs <span class="m">50</span> folder<span class="s2">&quot;/cs50/check50/SOURCES/opt/check50/bin/check50.js&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, I tried the <a href="http://cdn.cs50.net/2015/x/psets/1/pset1/pset1.html#hello_c">example code from the coursesite</a>:</p>

<figure class='code'><figcaption><span>[Hello World - The first try] (hello-0.1.c)</span> <a href='http://doxanthropos.github.io/downloads/code/hello-0.1.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This compiled without visible errors, but when I made the compiling a little more verbose, I got this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ CFLAGS</span><span class="o">=</span><span class="s2">&quot;-Wall&quot;</span> make hello
</span><span class='line'>cc -Wall    hello.c   -o hello
</span><span class='line'>hello.c: In <span class="k">function</span> ‘main’:
</span><span class='line'>hello.c:6:1: warning: control reaches end of non-void <span class="k">function</span> <span class="o">[</span>-Wreturn-type<span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>^
</span></code></pre></td></tr></table></div></figure>


<p>One line more and the more verbose compiling also went on without errors:</p>

<figure class='code'><figcaption><span>[Hello World - Without Warnings] (hello.c)</span> <a href='http://doxanthropos.github.io/downloads/code/hello.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to use the code to test the check50 function with the new course:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>check50 2014.fall.pset1.hello hello.c
</span><span class='line'>:<span class="o">)</span> hello.c exists
</span><span class='line'>:<span class="o">)</span> hello.c compiles
</span><span class='line'>:<span class="o">)</span> prints <span class="s2">&quot;hello, world\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That went well. It seems like I am ready to dive into the coding problems and need only use the appliance for submitting the solutions. On the side, I have become somewhat comfortable with the functions, that <a href="http://octopress.org">Octopress</a> provides for embedding code into blogposts.</p>

<h2>UPDATES</h2>

<p>If you want your c compiler to work exactly like the one in the appliance, you will have to first install the clang compiler and then set a few variables for your shell. You best do the latter in your .bashrc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>clang
</span><span class='line'><span class="nb">export </span><span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&quot;-ggdb3 -O0 -std=c99 -Wall -Werror&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LDLIBS</span><span class="o">=</span><span class="s2">&quot;-lcs50 -lm&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SICP in Emacs: Reading in the info-Buffer]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/10/09/sicp-in-emacs-reading-in-the-info-buffer/"/>
    <updated>2014-10-09T22:21:44+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/10/09/sicp-in-emacs-reading-in-the-info-buffer</id>
    <content type="html"><![CDATA[<p>Structure and Interpretation of Computer Programs, short <a href="http://mitpress.mit.edu/sicp/">SICP</a> is a great book and <a href="http://www.gnu.org/software/emacs/">Emacs</a> is a great tool for all things about text. So it is only natural to use one with the other and yesterday I stumbled upon this blogpost: <a href="http://jugglingbits.wordpress.com/2009/12/04/sicp-in-emacs/">SICP in Emacs</a>. Sadly I had no idea about how to use or install a book in the info-system. That had to change a bit and the following will be instruction for me in the future, should I forget how to bring the greatest CS-book of the 80ies into one of the greatest programs from the 80ies.</p>

<!-- more -->


<p>In the search for information on info, I found that there is a lot of documentation missing from my relatively recent Debian install. Most of the more interesting parts on info are in the package &ldquo;texinfo-doc-nonfree&rdquo;. I suggest to install it on every system, because the <a href="http://www.gnu.org/software/texinfo/manual/texinfo/html_node/index.html">info system</a> is very cool and it is very rewarding t read its manual. What I don&rsquo;t understand is the &ldquo;nonfree&rdquo; part: should it not be free software as a part of the GNU-project?
So the first step is this:</p>

<pre><code>sudo apt-get install texinfo-doc-nonfree 
</code></pre>

<p>After that, I downloaded the Info-version of SICP, that can be found on the <a href="http://www.neilvandyke.org/sicp-texi/">website of Neil van Dyke</a>.</p>

<p>This file has to be moved to a &ldquo;info directory&rdquo;. The manual mentioned above explains how to build one, but I just used the one used by Emacs and gave the file the necessary permissions:</p>

<pre><code>sudo cp sicp.info.gz /usr/local/share/info/
sudo chmod 644 /usr/local/share/info/sicp.info.gz 
</code></pre>

<p>The rest of the installation is done by &ldquo;<a href="http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html">install-info</a>&rdquo;:</p>

<pre><code>sudo install-info /usr/local/share/info/sicp.info.gz /usr/local/share/info/dir
</code></pre>

<p>This all of course works primarily on Debian-GNU/Linux, but some good advice for info on Windows seems to be found in this blogpost: <a href="http://pchristensen.com/blog/articles/setting-up-and-using-emacs-infomode/">http://pchristensen.com/blog/articles/setting-up-and-using-emacs-infomode/</a></p>

<p>My complete reading setup for SICP now looks like this:</p>

<p><img src="http://doxanthropos.github.io/images/2014-10-sicp-in-emacs.png" alt="A screenshot of Emacs with three frames: sicp, a source code file and a scheme REPL" /></p>

<p>It looks like I am not the only one who likes this technological opportunity <a href="https://www.flickr.com/photos/redbike/5324820738/in/photostream/">enough to make a screenshot</a></p>

<p>If you need some convincing, why reading SICP in the first place is a good idea, you might read this article: <a href="http://hackerretreat.com/why-how-start-sicp/">Why and how to start your sicp trek</a></p>

<p>As RMS tends to say: &ldquo;Happy hacking!&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging About Processing]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/"/>
    <updated>2014-06-13T14:56:31+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing</id>
    <content type="html"><![CDATA[<p>UPDATE: I removed the processing.js from the head, because it meant unneccessary page load on the blog and because <a href="https://p5js.org">P5.js</a>. It also works, if you put it in the article, like I did here, after the &ldquo;more&rdquo;-break, so that it only loads when someone is actually viewing the post that contains the Processing example.</p>

<p>Some notes about Processing</p>

<!-- more -->


<script src="http://doxanthropos.github.io/javascripts/processing.min.js"></script>


<h3>Creative Coding MOOC</h3>

<p>Since last week there is a course about creative coding on <a href="https://www.futurelearn.com" title="a mooc provider">Futurelearn</a>, held by John McCormack from the Monash University. It started great and was already very successful in motivating the participants to combine art and programming. The language of choice is <a href="http://processing.org/">Processing</a>, a Java-based language, that provides easy access to the kind of functions that are usually needed to make art on the computer.</p>

<h4>Showing Processing on the web</h4>

<p>Since art wants to be seen, there is of course a need to have a way of showing the code and its running examples to others. Processing already comes with some ways to do that. You can for example build an android app from your code or a standalone Java-Program. But the way to go, to show something to an audience today qould of course be the web.</p>

<h4>Openprocessing and sketchpad</h4>

<p>Two websites are explicitely dedicated to the cause of showcasing Processing-sketches: <a href="http://www.openprocessing.org/">Openprocessing</a> and <a href="http://sketchpad.cc/">Sketchpad</a>. Both provide not only the possibility to share your existing sketches and show them online, but also to create new ones online.</p>

<h4>Processing.js</h4>

<p>Both these sites use <a href="http://processingjs.org/">Processing.js</a>, a port of the Processing language to Javascript. With Processing.js, it is possible to run sketches in any browser that supports modern web technologies (Javascript, Canvas). So theoretically it is possible, to show sketches on any webpage, not only on the sites that are built to do that. For example on your own website or blog. The pragmatic way to achieve that, would be to embed sketches from Openprocessing or Sketchpad in that site, but why not go the fully self sufficient route?</p>

<h4>simple HTML-page</h4>

<p>There is not much to know, to use Processing on a simple html-page. All the steps are explained on the <a href="http://processingjs.org/articles/p5QuickStart.html">Quick Start Article</a> from Processing.js.
In short: You just put the Prcessing.js file in place, where you store your other Javascripts, load them in the head of your webpage and ten you can add a Canvas element, that loads your sketch.</p>

<h4>Octopress</h4>

<p>But what, if your website is done the hacker way, if it is an <a href="http://octopress.org/">octopress</a> blog on github?</p>

<p>Basically it&rsquo;s the same as using Processing.js on any other html-page.</p>

<h4>Where to put the Processing.js?</h4>

<p>Octopress has a folder named &ldquo;javascripts&rdquo; and that would be where to put the Processing.js file. Of course, you will want to put it in the source/javascripts folder, so that it will not vanish when you rebuild the blog.</p>

<h4>Where is the head of my template?</h4>

<p>Since the Javascript is usually placed in the head-section of a webpage, you need to put the reference to Processing.js into the head.html file that is located in the source/_includes folder in the same place, where you find the other Javascript references. It will look somewhat like this:</p>

<pre><code>&lt;script src="http://doxanthropos.github.io/javascripts/processing.min.js"&gt;&lt;/script&gt;
</code></pre>

<h4>Making your sketches a comfortable home</h4>

<p>To have some order in my files, I decided to make a folder with the name &ldquo;processing&rdquo; for all the sketches, that I might want to share with the world. Of course also in the &ldquo;source&rdquo; folder. Now I can put any sketch that I want to include in a blogpost in this folder and load it into a canvas-element, just like this:</p>

<pre><code>&lt;center&gt;
&lt;canvas data-processing-sources="/processing/tutorial.pde"&gt;&lt;/canvas&gt;
&lt;/center&gt;
</code></pre>

<p>This is the a sketch from the <a href="http://processing.org/tutorials/gettingstarted/">&ldquo;getting started&rdquo; tutorial</a> on the processing site and on this blog it looks like this:</p>

<center>
<canvas data-processing-sources="/processing/tutorial.pde"></canvas>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hallo Welt]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/05/23/hallo-welt/"/>
    <updated>2014-05-23T15:46:55+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/05/23/hallo-welt</id>
    <content type="html"><![CDATA[<p>Einfach mal: &ldquo;Hallo!&rdquo;</p>

<p>Nachdem ich dieses Blog nun eingerichtet habe, könnte es sein, dass ich hier auch mal was schreibe.</p>
]]></content>
  </entry>
  
</feed>
