<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fragmented Notes]]></title>
  <link href="http://doxanthropos.github.io/atom.xml" rel="self"/>
  <link href="http://doxanthropos.github.io/"/>
  <updated>2015-08-28T15:51:20+02:00</updated>
  <id>http://doxanthropos.github.io/</id>
  <author>
    <name><![CDATA[Knut Jackowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creative Coding With Processing ... Again]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again/"/>
    <updated>2015-08-09T14:53:56+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again</id>
    <content type="html"><![CDATA[<p>This week was the start of two courses (<a href="https://www.futurelearn.com/courses/creative-coding">Creative Coding on Futurelearn</a> and <a href="https://www.coursera.org/course/digitalmedia">Creative Programming for Digital Media &amp; Mobile Apps on Coursera.org</a> about creative programming in <a href="https://processing.org/">Processing</a>) and I blogged about them in my <a href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/">main blog</a>.
Since I have already done some of the assignments some time ago, I focused on some things that I knew about, but did not do so far.</p>

<h2>Creating gifs</h2>

<p>There are basically two simple ways to create gifs from Processing sketches (that&rsquo;s what the single programs are called in the Processing world) and both are explained by <a href="http://www.jeromeherr.space/">Jerome Herr</a> on <a href="http://p5art.tumblr.com/">his Tumblr</a>:</p>

<ol>
<li><a href="http://p5art.tumblr.com/post/98291300538/turning-a-processing-sketch-into-an-animated-gif">Save single frame images and combine them later with other tools</a> or</li>
<li><a href="http://p5art.tumblr.com/post/76979034572/exporting-sketches-as-animated-gifs-in-processing">use a library that creates the gif while the program is running</a>.</li>
</ol>


<p>I tried both and both worked fine, at least in part. I was able to install <a href="http://www.lcdf.org/gifsicle/">gifsicle</a>, but it would not run properly so I did what anyone would do who already has some experience with <a href="http://www.imagemagick.org/index.php">ImageMagick</a>, I used the usual <a href="https://www.tjhsst.edu/~dhyatt/supercomp/n401a.html">convert</a> to do the trick.</p>

<p>I will need some more tries to determine, which method to use more because they seem to have different effects on the speed of execution of the sketches. This doesn&rsquo;t really matter, when the animations are generated by code alone, because the framerate will be the same for the exection as for the gif, but it produces much different output when human interaction is part of the sketch.</p>

<p>So probably there will be more here about <a href="https://processing.org/">Processing</a> in the near future. By the way, the mentioned Tumblr from Jerome also has a <a href="http://p5art.tumblr.com/tutorials">nice list of learning ressources for Processing</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing With Diaspora]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/02/26/sharing-with-diaspora/"/>
    <updated>2015-02-26T21:28:11+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/02/26/sharing-with-diaspora</id>
    <content type="html"><![CDATA[<p>In the last weeks, I had some reasons to think about privacy issues and social networks. I stopped using Facebook and began using <a href="https://diasporafoundation.org/">Diaspora*</a> and <a href="https://www.gnu.org/software/social/">GNU/Social</a> more than before. So when I found a <a href="https://sharetodiaspora.github.io/about/">sharing service</a> earlier today, to share webpages into the Diaspora * <a href="http://the-federation.info/">Federation</a>, I used it as an excuse to get rid of the Twitter button and the Disqus comments and put in the Code to share to Diaspora * .</p>

<p>If you want to do the same, you will find the part of Octopress, that covers the sharing codes in &ldquo;source/_includes/post/sharing.html&rdquo;. Just put in the code from the sharing site and you are good to go:</p>

<figure class='code'><figcaption><span>Diaspora sharing link, without JavaScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://sharetodiaspora.github.io/?title=Your title here&amp;url=http://www.example.com/some/path&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://sharetodiaspora.github.io/favicon.png&quot;</span> <span class="na">style=</span><span class="s">&quot;border: 0px solid;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I only changed it a little, of course filling in the template code for the post-title and post-url:</p>

<figure class='code'><figcaption><span>Diaspora sharing link with Octopress Tags (diaspora.html)</span> <a href='http://doxanthropos.github.io/downloads/code/diaspora.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://sharetodiaspora.github.io/?title={{ page.title }}&amp;url={{ site.url }}{{ page.url }}&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size: 0.85;&quot;</span><span class="nt">&gt;</span>Share on Diaspora<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://sharetodiaspora.github.io/favicon.png&quot;</span> <span class="na">style=</span><span class="s">&quot;border: 0px solid;&quot;</span> <span class="nt">/&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python: Free Resources]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/01/11/learning-python/"/>
    <updated>2015-01-11T14:51:15+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/01/11/learning-python</id>
    <content type="html"><![CDATA[<p>This is a list of free online books and other resources for anybody interested in learning the Python programming language. There are other lists out there, this one contains only items, that I have personally tried and found useful.</p>

<ul>
<li><a href="http://www.codecademy.com/">Codecademy</a>: A website with interactive tutorials.</li>
<li><a href="http://www.pythonlearn.com/">PythonLearn</a>: A website and a book with videos and autograded exercises. It is the material used for the Coursera-course <a href="https://www.coursera.org/course/pythonlearn">Programming for Everybody</a> by Charles Severance.</li>
<li><a href="https://www.udacity.com/course/cs101">Udacity: Intro to Computer Science &amp; Programming CS 101</a>: A complete introduction to Computer Science with Python.</li>
<li><a href="http://www.greenteapress.com/thinkpython/">Think Python: How to Think Like a Computer Scientist</a>: A book that is also an introduction to Computer Science as well as an introduction to Python. If you have succeded in learning Python (at least to a reasonable degree), the author might still be of interest to you, there are some more advanced books on his website.</li>
<li><a href="http://learnpythonthehardway.org/book/">Learn Python The Hard Way</a>: A very good book about Python and Programming in general. Not really hard.</li>
<li>Last but not least: <a href="https://docs.python.org/2/tutorial/index.html">The Python Tutorial</a> - The official tutorial by Python.org.</li>
</ul>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up the Tools for CS 50]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/01/05/setting-up-the-tools-for-cs-50/"/>
    <updated>2015-01-05T13:45:11+01:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/01/05/setting-up-the-tools-for-cs-50</id>
    <content type="html"><![CDATA[<p>So CS 50 has officially begun. Time to get my computer ready for the work.</p>

<p>The installation and use of the appliance is covered in great detail on the coursepages, so there is no need to describe it here. What I do different is that I plan to work mostly outside of the appliance, because my computer is barely able to run it and it is a pain in the backside to use it for longer periods (It&rsquo;s an old laptop, that wasn&rsquo;t powerful even when it was new.).</p>

<!-- more -->


<p>Since I am using Linux on my computer as the main operating system, setting it up for coding is not so big a task. Most of the packages are allready installed by me (the most important would be &ldquo;build-essential&rdquo;, a metapackage, that brings compilers and stuff). Getting the functions from CS 50 to work is another thing.</p>

<p>First I followed the instructions on the <a href="https://manual.cs50.net/library/">manual</a> for the CS 50 libraries. It was a lot of copy/pasting, but in the end the libraries in all four languages worked fine.</p>

<p>After that, I began to search for instructions for the other tools of the appliance, most important the check50 script. A nice <a href="https://medium.com/@ddiipp/take-harvards-cs50-without-cs50-appliance-8372acb91314">blogpost on medium</a> showed me where to look, but sadly the mentioned git-repository was deleted since then. I found a <a href="https://github.com/jthurner/check50">copy of it on github</a> and tried to install it. Worked fine. But the most interesting part of it was the question: will it work with the current course?</p>

<p>For convenience I quickly made alias for it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">check50</span><span class="o">=</span><span class="s2">&quot;node /&quot;</span>path to my cs <span class="m">50</span> folder<span class="s2">&quot;/cs50/check50/SOURCES/opt/check50/bin/check50.js&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, I tried the <a href="http://cdn.cs50.net/2015/x/psets/1/pset1/pset1.html#hello_c">example code from the coursesite</a>:</p>

<figure class='code'><figcaption><span>[Hello World - The first try] (hello-0.1.c)</span> <a href='http://doxanthropos.github.io/downloads/code/hello-0.1.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This compiled without visible errors, but when I made the compiling a little more verbose, I got this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ CFLAGS</span><span class="o">=</span><span class="s2">&quot;-Wall&quot;</span> make hello
</span><span class='line'>cc -Wall    hello.c   -o hello
</span><span class='line'>hello.c: In <span class="k">function</span> ‘main’:
</span><span class='line'>hello.c:6:1: warning: control reaches end of non-void <span class="k">function</span> <span class="o">[</span>-Wreturn-type<span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>^
</span></code></pre></td></tr></table></div></figure>


<p>One line more and the more verbose compiling also went on without errors:</p>

<figure class='code'><figcaption><span>[Hello World - Without Warnings] (hello.c)</span> <a href='http://doxanthropos.github.io/downloads/code/hello.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to use the code to test the check50 function with the new course:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>check50 2014.fall.pset1.hello hello.c
</span><span class='line'>:<span class="o">)</span> hello.c exists
</span><span class='line'>:<span class="o">)</span> hello.c compiles
</span><span class='line'>:<span class="o">)</span> prints <span class="s2">&quot;hello, world\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That went well. It seems like I am ready to dive into the coding problems and need only use the appliance for submitting the solutions. On the side, I have become somewhat comfortable with the functions, that <a href="http://octopress.org">Octopress</a> provides for embedding code into blogposts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SICP in Emacs: Reading in the info-Buffer]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/10/09/sicp-in-emacs-reading-in-the-info-buffer/"/>
    <updated>2014-10-09T22:21:44+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/10/09/sicp-in-emacs-reading-in-the-info-buffer</id>
    <content type="html"><![CDATA[<p>Structure and Interpretation of Computer Programs, short <a href="http://mitpress.mit.edu/sicp/">SICP</a> is a great book and <a href="http://www.gnu.org/software/emacs/">Emacs</a> is a great tool for all things about text. So it is only natural to use one with the other and yesterday I stumbled upon this blogpost: <a href="http://jugglingbits.wordpress.com/2009/12/04/sicp-in-emacs/">SICP in Emacs</a>. Sadly I had no idea about how to use or install a book in the info-system. That had to change a bit and the following will be instruction for me in the future, should I forget how to bring the greatest CS-book of the 80ies into one of the greatest programs from the 80ies.</p>

<!-- more -->


<p>In the search for information on info, I found that there is a lot of documentation missing from my relatively recent Debian install. Most of the more interesting parts on info are in the package &ldquo;texinfo-doc-nonfree&rdquo;. I suggest to install it on every system, because the <a href="http://www.gnu.org/software/texinfo/manual/texinfo/html_node/index.html">info system</a> is very cool and it is very rewarding t read its manual. What I don&rsquo;t understand is the &ldquo;nonfree&rdquo; part: should it not be free software as a part of the GNU-project?
So the first step is this:</p>

<pre><code>sudo apt-get install texinfo-doc-nonfree 
</code></pre>

<p>After that, I downloaded the Info-version of SICP, that can be found on the <a href="http://www.neilvandyke.org/sicp-texi/">website of Neil van Dyke</a>.</p>

<p>This file has to be moved to a &ldquo;info directory&rdquo;. The manual mentioned above explains how to build one, but I just used the one used by Emacs and gave the file the necessary permissions:</p>

<pre><code>sudo cp sicp.info.gz /usr/local/share/info/
sudo chmod 644 /usr/local/share/info/sicp.info.gz 
</code></pre>

<p>The rest of the installation is done by &ldquo;<a href="http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html">install-info</a>&rdquo;:</p>

<pre><code>sudo install-info /usr/local/share/info/sicp.info.gz /usr/local/share/info/dir
</code></pre>

<p>This all of course works primarily on Debian-GNU/Linux, but some good advice for info on Windows seems to be found in this blogpost: <a href="http://pchristensen.com/blog/articles/setting-up-and-using-emacs-infomode/">http://pchristensen.com/blog/articles/setting-up-and-using-emacs-infomode/</a></p>

<p>My complete reading setup for SICP now looks like this:</p>

<p><img src="http://doxanthropos.github.io/images/2014-10-sicp-in-emacs.png" alt="A screenshot of Emacs with three frames: sicp, a source code file and a scheme REPL" /></p>

<p>It looks like I am not the only one who likes this technological opportunity <a href="https://www.flickr.com/photos/redbike/5324820738/in/photostream/">enough to make a screenshot</a></p>

<p>If you need some convincing, why reading SICP in the first place is a good idea, you might read this article: <a href="http://hackerretreat.com/why-how-start-sicp/">Why and how to start your sicp trek</a></p>

<p>As RMS tends to say: &ldquo;Happy hacking!&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging About Processing]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/"/>
    <updated>2014-06-13T14:56:31+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing</id>
    <content type="html"><![CDATA[<p>Some notes about Processing</p>

<h3>Creative Coding MOOC</h3>

<p>Since last week there is a course about creative coding on <a href="https://www.futurelearn.com" title="a mooc provider">Futurelearn</a>, held by John McCormack from the Monash University. It started great and was already very successful in motivating the participants to combine art and programming. The language of choice is <a href="http://processing.org/">Processing</a>, a Java-based language, that provides easy access to the kind of functions that are usually needed to make art on the computer.</p>

<h4>Showing Processing on the web</h4>

<p>Since art wants to be seen, there is of course a need to have a way of showing the code and its running examples to others. Processing already comes with some ways to do that. You can for example build an android app from your code or a standalone Java-Program. But the way to go, to show something to an audience today qould of course be the web.</p>

<h4>Openprocessing and sketchpad</h4>

<p>Two websites are explicitely dedicated to the cause of showcasing Processing-sketches: <a href="http://www.openprocessing.org/">Openprocessing</a> and <a href="http://sketchpad.cc/">Sketchpad</a>. Both provide not only the possibility to share your existing sketches and show them online, but also to create new ones online.</p>

<h4>Processing.js</h4>

<p>Both these sites use <a href="http://processingjs.org/">Processing.js</a>, a port of the Processing language to Javascript. With Processing.js, it is possible to run sketches in any browser that supports modern web technologies (Javascript, Canvas). So theoretically it is possible, to show sketches on any webpage, not only on the sites that are built to do that. For example on your own website or blog. The pragmatic way to achieve that, would be to embed sketches from Openprocessing or Sketchpad in that site, but why not go the fully self sufficient route?</p>

<h4>simple HTML-page</h4>

<p>There is not much to know, to use Processing on a simple html-page. All the steps are explained on the <a href="http://processingjs.org/articles/p5QuickStart.html">Quick Start Article</a> from Processing.js.
In short: You just put the Prcessing.js file in place, where you store your other Javascripts, load them in the head of your webpage and ten you can add a Canvas element, that loads your sketch.</p>

<h4>Octopress</h4>

<p>But what, if your website is done the hacker way, if it is an <a href="http://octopress.org/">octopress</a> blog on github?</p>

<p>Basically it&rsquo;s the same as using Processing.js on any other html-page.</p>

<h4>Where to put the Processing.js?</h4>

<p>Octopress has a folder named &ldquo;javascripts&rdquo; and that would be where to put the Processing.js file. Of course, you will want to put it in the source/javascripts folder, so that it will not vanish when you rebuild the blog.</p>

<h4>Where is the head of my template?</h4>

<p>Since the Javascript is usually placed in the head-section of a webpage, you need to put the reference to Processing.js into the head.html file that is located in the source/_includes folder in the same place, where you find the other Javascript references. It will look somewhat like this:</p>

<pre><code>&lt;script src="http://doxanthropos.github.io/javascripts/processing.min.js"&gt;&lt;/script&gt;
</code></pre>

<h4>Making your sketches a comfortable home</h4>

<p>To have some order in my files, I decided to make a folder with the name &ldquo;processing&rdquo; for all the sketches, that I might want to share with the world. Of course also in the &ldquo;source&rdquo; folder. Now I can put any sketch that I want to include in a blogpost in this folder and load it into a canvas-element, just like this:</p>

<pre><code>&lt;center&gt;
&lt;canvas data-processing-sources="/processing/tutorial.pde"&gt;&lt;/canvas&gt;
&lt;/center&gt;
</code></pre>

<p>This is the a sketch from the <a href="http://processing.org/tutorials/gettingstarted/">&ldquo;getting started&rdquo; tutorial</a> on the processing site and on this blog it looks like this:</p>

<center>
<canvas data-processing-sources="/processing/tutorial.pde"></canvas>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hallo Welt]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/05/23/hallo-welt/"/>
    <updated>2014-05-23T15:46:55+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/05/23/hallo-welt</id>
    <content type="html"><![CDATA[<p>Einfach mal: &ldquo;Hallo!&rdquo;</p>

<p>Nachdem ich dieses Blog nun eingerichtet habe, könnte es sein, dass ich hier auch mal was schreibe.</p>
]]></content>
  </entry>
  
</feed>
