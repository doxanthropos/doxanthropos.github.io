<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Processing | Fragmented Notes]]></title>
  <link href="http://doxanthropos.github.io/blog/categories/processing/atom.xml" rel="self"/>
  <link href="http://doxanthropos.github.io/"/>
  <updated>2017-01-04T23:32:11+01:00</updated>
  <id>http://doxanthropos.github.io/</id>
  <author>
    <name><![CDATA[Knut Jackowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blogging About P5JS]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/05/15/blogging-about-p5js/"/>
    <updated>2016-05-15T15:47:56+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/05/15/blogging-about-p5js</id>
    <content type="html"><![CDATA[<p>This is kind of a new version of my old <a href="/blog/2014/06/13/blogging-about-processing/">post about Processing</a> and will cover the things I learned while writing my <a href="/blog/2016/05/15/a-minimalist-physics-engine/">last post</a> to make a <a href="https://p5js.org/">P5JS</a>-sketch work on this blog.</p>

<!-- more -->


<p><a href="https://p5js.org/">P5</a> is somewhat different from the common <a href="https://processing.org/">Processing</a>, because it is a complete rewrite of the language into Javascript. This makes it easier to use on the web and also more flexible to include into a webpage in places where traditional Processing even with Processing.js would not work.</p>

<p>Consider this code that I used to run the sketch in my last post:
``` Javascript</p>

<script src="http://doxanthropos.github.io/javascripts/p5.js"></script>


<script src="http://doxanthropos.github.io/javascripts/p5.dom.js"></script>


<center>
<button onclick="setup();">Restart</button>
</center>


<div id="p5canvas"></div>


<script>
var w;
function setup() {
    var cnv = createCanvas($("#p5canvas").width(),360);
    cnv.parent("p5canvas");
    w = new Walker(width/2,0);
}

function draw() {
    background(51);
    w.display();
    w.update();
  
}

function Walker(x,y) {
    this.pos = createVector(x,y);
    this.vel = createVector(0,0);
    this.acc = createVector(0,0.1); 

    this.update = function(){
        this.vel.add(this.acc);
        this.pos.add(this.vel);
    }

    this.display = function(){
        fill(255);
        ellipse(this.pos.x,this.pos.y,48,48);
    }
}

</script>


<p>```
The first two lines are kind of obvious. They load the necessary p5-libraries into the page.</p>

<p>Line 4 is useful for many sketches that include movement, to start it again at the beginning. The button calls the function &ldquo;setup&rdquo; to restart the whole sketch.</p>

<p>The really cool part is line 6 with lines 10 and 11: they create the canvas for the processing sketch in a normal div that is adressed by its id (#p5canvas). This is done with the <a href="http://p5js.org/reference/#/libraries/p5.dom">p5.dom</a> library that is really good documented (this is where I learned how to do this).</p>

<p>I used jQuery to pass the width of the div to the setup function, so that it would fit into the blog regardless of the size of the window.</p>

<p>One cool consequence of this is that P5 can be inserted into any html element on your website that you can identify via JavaScript/jQuery.</p>

<p>I really like this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Minimalist Physics Engine]]></title>
    <link href="http://doxanthropos.github.io/blog/2016/05/15/a-minimalist-physics-engine/"/>
    <updated>2016-05-15T13:04:03+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2016/05/15/a-minimalist-physics-engine</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/shiffman">Daniel Shiffman</a> surprised me yesterday in his course &ldquo;<a href="https://www.kadenze.com/courses/the-nature-of-code">The Nature of Code</a>&rdquo; with a most simple concept of a physics engine in two lines of JavaScript:</p>

<pre><code class="Javascript">pos.add(vel);
vel.add(acc);
</code></pre>

<!-- more -->


<script src="http://doxanthropos.github.io/javascripts/p5.js"></script>


<script src="http://doxanthropos.github.io/javascripts/p5.dom.js"></script>


<p>These two lines have the three components(vectors) that are necessary to describe movement: position, velocity and acceleration:</p>

<ol>
<li>Objects have a position (pos).</li>
<li>The position gets changed (add) by velocity (vel).</li>
<li>The velocity gets changed (add) by acceleration (acc).</li>
</ol>


<p>The add-method comes from <a href="https://p5js.org">P5JS</a> and belongs to the <a href="linktothevectorobjectsdocumentation">vector object</a>.</p>

<p>Of course to use it in a sketch, there is more to write than these two lines, but they contain the core concept. For example, this code from the course creates a circle that looks like it is falling, because it accelerates downward:</p>

<pre><code class="Javascript">function Walker(x,y) {
    this.pos = createVector(x,y);
    this.vel = createVector(0,0);
    this.acc = createVector(0,0.1); 

    this.update = function(){
        this.vel.add(this.acc);
        this.pos.add(this.vel);
    }

    this.display = function(){
        fill(255);
        ellipse(this.pos.x,this.pos.y,48,48);
    }
}
</code></pre>

<center>
<button onclick="setup();" style="align:right;">Restart</button>
</center>


<div id="p5canvas"></div>


<script>
var w;
function setup() {
    var cnv = createCanvas($("#p5canvas").width(),360);
    w = new Walker(width/2,0);
    cnv.parent("p5canvas");
}

function draw() {
    background(51);
    w.display();
    w.update();
  
}

function Walker(x,y) {
    this.pos = createVector(x,y);
    this.vel = createVector(0,0);
    this.acc = createVector(0,0.1); 

    this.update = function(){
        this.vel.add(this.acc);
        this.pos.add(this.vel);
    }

    this.display = function(){
        fill(255);
        ellipse(this.pos.x,this.pos.y,48,48);
    }
}

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creative Coding With Processing ... Again]]></title>
    <link href="http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again/"/>
    <updated>2015-08-09T14:53:56+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2015/08/09/creative-coding-again</id>
    <content type="html"><![CDATA[<p>This week was the start of two courses (<a href="https://www.futurelearn.com/courses/creative-coding">Creative Coding on Futurelearn</a> and <a href="https://www.coursera.org/course/digitalmedia">Creative Programming for Digital Media &amp; Mobile Apps on Coursera.org</a> about creative programming in <a href="https://processing.org/">Processing</a>) and I blogged about them in my <a href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/">main blog</a>.
Since I have already done some of the assignments some time ago, I focused on some things that I knew about, but did not do so far.</p>

<h2>Creating gifs</h2>

<p>There are basically two simple ways to create gifs from Processing sketches (that&rsquo;s what the single programs are called in the Processing world) and both are explained by <a href="http://www.jeromeherr.space/">Jerome Herr</a> on <a href="http://p5art.tumblr.com/">his Tumblr</a>:</p>

<ol>
<li><a href="http://p5art.tumblr.com/post/98291300538/turning-a-processing-sketch-into-an-animated-gif">Save single frame images and combine them later with other tools</a> or</li>
<li><a href="http://p5art.tumblr.com/post/76979034572/exporting-sketches-as-animated-gifs-in-processing">use a library that creates the gif while the program is running</a>.</li>
</ol>


<p>I tried both and both worked fine, at least in part. I was able to install <a href="http://www.lcdf.org/gifsicle/">gifsicle</a>, but it would not run properly so I did what anyone would do who already has some experience with <a href="http://www.imagemagick.org/index.php">ImageMagick</a>, I used the usual <a href="https://www.tjhsst.edu/~dhyatt/supercomp/n401a.html">convert</a> to do the trick.</p>

<p>I will need some more tries to determine, which method to use more because they seem to have different effects on the speed of execution of the sketches. This doesn&rsquo;t really matter, when the animations are generated by code alone, because the framerate will be the same for the exection as for the gif, but it produces much different output when human interaction is part of the sketch.</p>

<p>So probably there will be more here about <a href="https://processing.org/">Processing</a> in the near future. By the way, the mentioned Tumblr from Jerome also has a <a href="http://p5art.tumblr.com/tutorials">nice list of learning ressources for Processing</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging About Processing]]></title>
    <link href="http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing/"/>
    <updated>2014-06-13T14:56:31+02:00</updated>
    <id>http://doxanthropos.github.io/blog/2014/06/13/blogging-about-processing</id>
    <content type="html"><![CDATA[<p>UPDATE: I removed the processing.js from the head, because it meant unneccessary page load on the blog and because <a href="https://p5js.org">P5.js</a>. It also works, if you put it in the article, like I did here, after the &ldquo;more&rdquo;-break, so that it only loads when someone is actually viewing the post that contains the Processing example.</p>

<p>Some notes about Processing</p>

<!-- more -->


<script src="http://doxanthropos.github.io/javascripts/processing.min.js"></script>


<h3>Creative Coding MOOC</h3>

<p>Since last week there is a course about creative coding on <a href="https://www.futurelearn.com" title="a mooc provider">Futurelearn</a>, held by John McCormack from the Monash University. It started great and was already very successful in motivating the participants to combine art and programming. The language of choice is <a href="http://processing.org/">Processing</a>, a Java-based language, that provides easy access to the kind of functions that are usually needed to make art on the computer.</p>

<h4>Showing Processing on the web</h4>

<p>Since art wants to be seen, there is of course a need to have a way of showing the code and its running examples to others. Processing already comes with some ways to do that. You can for example build an android app from your code or a standalone Java-Program. But the way to go, to show something to an audience today qould of course be the web.</p>

<h4>Openprocessing and sketchpad</h4>

<p>Two websites are explicitely dedicated to the cause of showcasing Processing-sketches: <a href="http://www.openprocessing.org/">Openprocessing</a> and <a href="http://sketchpad.cc/">Sketchpad</a>. Both provide not only the possibility to share your existing sketches and show them online, but also to create new ones online.</p>

<h4>Processing.js</h4>

<p>Both these sites use <a href="http://processingjs.org/">Processing.js</a>, a port of the Processing language to Javascript. With Processing.js, it is possible to run sketches in any browser that supports modern web technologies (Javascript, Canvas). So theoretically it is possible, to show sketches on any webpage, not only on the sites that are built to do that. For example on your own website or blog. The pragmatic way to achieve that, would be to embed sketches from Openprocessing or Sketchpad in that site, but why not go the fully self sufficient route?</p>

<h4>simple HTML-page</h4>

<p>There is not much to know, to use Processing on a simple html-page. All the steps are explained on the <a href="http://processingjs.org/articles/p5QuickStart.html">Quick Start Article</a> from Processing.js.
In short: You just put the Prcessing.js file in place, where you store your other Javascripts, load them in the head of your webpage and ten you can add a Canvas element, that loads your sketch.</p>

<h4>Octopress</h4>

<p>But what, if your website is done the hacker way, if it is an <a href="http://octopress.org/">octopress</a> blog on github?</p>

<p>Basically it&rsquo;s the same as using Processing.js on any other html-page.</p>

<h4>Where to put the Processing.js?</h4>

<p>Octopress has a folder named &ldquo;javascripts&rdquo; and that would be where to put the Processing.js file. Of course, you will want to put it in the source/javascripts folder, so that it will not vanish when you rebuild the blog.</p>

<h4>Where is the head of my template?</h4>

<p>Since the Javascript is usually placed in the head-section of a webpage, you need to put the reference to Processing.js into the head.html file that is located in the source/_includes folder in the same place, where you find the other Javascript references. It will look somewhat like this:</p>

<pre><code>&lt;script src="/javascripts/processing.min.js"&gt;&lt;/script&gt;
</code></pre>

<h4>Making your sketches a comfortable home</h4>

<p>To have some order in my files, I decided to make a folder with the name &ldquo;processing&rdquo; for all the sketches, that I might want to share with the world. Of course also in the &ldquo;source&rdquo; folder. Now I can put any sketch that I want to include in a blogpost in this folder and load it into a canvas-element, just like this:</p>

<pre><code>&lt;center&gt;
&lt;canvas data-processing-sources="/processing/tutorial.pde"&gt;&lt;/canvas&gt;
&lt;/center&gt;
</code></pre>

<p>This is the a sketch from the <a href="http://processing.org/tutorials/gettingstarted/">&ldquo;getting started&rdquo; tutorial</a> on the processing site and on this blog it looks like this:</p>

<center>
<canvas data-processing-sources="/processing/tutorial.pde"></canvas>
</center>

]]></content>
  </entry>
  
</feed>
